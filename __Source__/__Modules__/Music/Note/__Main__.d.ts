import { Note as ErrorContainer } from "./Error";
import { Chord } from "../Chord/__Main__";
import { Interval } from "../Interval/__Main__";
import { Accidental, MidiOctave, MidiValue, NoteName, Pitch } from "./Types";
import { RelativeTime } from "@/Time/__Main__";
export declare class Note {
    static Error: typeof ErrorContainer.Error;
    static get C_Negative1(): Note;
    static get C$_Negative1(): Note;
    static get Db_Negative1(): Note;
    static get D_Negative1(): Note;
    static get D$_Negative1(): Note;
    static get Eb_Negative1(): Note;
    static get E_Negative1(): Note;
    static get F_Negative1(): Note;
    static get F$_Negative1(): Note;
    static get Gb_Negative1(): Note;
    static get G_Negative1(): Note;
    static get G$_Negative1(): Note;
    static get Ab_Negative1(): Note;
    static get A_Negative1(): Note;
    static get A$_Negative1(): Note;
    static get Bb_Negative1(): Note;
    static get B_Negative1(): Note;
    static get C0(): Note;
    static get C$0(): Note;
    static get Db0(): Note;
    static get D0(): Note;
    static get D$0(): Note;
    static get Eb0(): Note;
    static get E0(): Note;
    static get F0(): Note;
    static get F$0(): Note;
    static get Gb0(): Note;
    static get G0(): Note;
    static get G$0(): Note;
    static get Ab0(): Note;
    static get A0(): Note;
    static get A$0(): Note;
    static get Bb0(): Note;
    static get B0(): Note;
    static get C1(): Note;
    static get C$1(): Note;
    static get Db1(): Note;
    static get D1(): Note;
    static get D$1(): Note;
    static get Eb1(): Note;
    static get E1(): Note;
    static get F1(): Note;
    static get F$1(): Note;
    static get Gb1(): Note;
    static get G1(): Note;
    static get G$1(): Note;
    static get Ab1(): Note;
    static get A1(): Note;
    static get A$1(): Note;
    static get Bb1(): Note;
    static get B1(): Note;
    static get C2(): Note;
    static get C$2(): Note;
    static get Db2(): Note;
    static get D2(): Note;
    static get D$2(): Note;
    static get Eb2(): Note;
    static get E2(): Note;
    static get F2(): Note;
    static get F$2(): Note;
    static get Gb2(): Note;
    static get G2(): Note;
    static get G$2(): Note;
    static get Ab2(): Note;
    static get A2(): Note;
    static get A$2(): Note;
    static get Bb2(): Note;
    static get B2(): Note;
    static get C3(): Note;
    static get C$3(): Note;
    static get Db3(): Note;
    static get D3(): Note;
    static get D$3(): Note;
    static get Eb3(): Note;
    static get E3(): Note;
    static get F3(): Note;
    static get F$3(): Note;
    static get Gb3(): Note;
    static get G3(): Note;
    static get G$3(): Note;
    static get Ab3(): Note;
    static get A3(): Note;
    static get A$3(): Note;
    static get Bb3(): Note;
    static get B3(): Note;
    static get C4(): Note;
    static get C$4(): Note;
    static get Db4(): Note;
    static get D4(): Note;
    static get D$4(): Note;
    static get Eb4(): Note;
    static get E4(): Note;
    static get F4(): Note;
    static get F$4(): Note;
    static get Gb4(): Note;
    static get G4(): Note;
    static get G$4(): Note;
    static get Ab4(): Note;
    static get A4(): Note;
    static get A$4(): Note;
    static get Bb4(): Note;
    static get B4(): Note;
    static get C5(): Note;
    static get C$5(): Note;
    static get Db5(): Note;
    static get D5(): Note;
    static get D$5(): Note;
    static get Eb5(): Note;
    static get E5(): Note;
    static get F5(): Note;
    static get F$5(): Note;
    static get Gb5(): Note;
    static get G5(): Note;
    static get G$5(): Note;
    static get Ab5(): Note;
    static get A5(): Note;
    static get A$5(): Note;
    static get Bb5(): Note;
    static get B5(): Note;
    static get C6(): Note;
    static get C$6(): Note;
    static get Db6(): Note;
    static get D6(): Note;
    static get D$6(): Note;
    static get Eb6(): Note;
    static get E6(): Note;
    static get F6(): Note;
    static get F$6(): Note;
    static get Gb6(): Note;
    static get G6(): Note;
    static get G$6(): Note;
    static get Ab6(): Note;
    static get A6(): Note;
    static get A$6(): Note;
    static get Bb6(): Note;
    static get B6(): Note;
    static get C7(): Note;
    static get C$7(): Note;
    static get Db7(): Note;
    static get D7(): Note;
    static get D$7(): Note;
    static get Eb7(): Note;
    static get E7(): Note;
    static get F7(): Note;
    static get F$7(): Note;
    static get Gb7(): Note;
    static get G7(): Note;
    static get G$7(): Note;
    static get Ab7(): Note;
    static get A7(): Note;
    static get A$7(): Note;
    static get Bb7(): Note;
    static get B7(): Note;
    static get C8(): Note;
    static get C$8(): Note;
    static get Db8(): Note;
    static get D8(): Note;
    static get D$8(): Note;
    static get Eb8(): Note;
    static get E8(): Note;
    static get F8(): Note;
    static get F$8(): Note;
    static get Gb8(): Note;
    static get G8(): Note;
    static get G$8(): Note;
    static get Ab8(): Note;
    static get A8(): Note;
    static get A$8(): Note;
    static get Bb8(): Note;
    static get B8(): Note;
    static get C9(): Note;
    static get C$9(): Note;
    static get Db9(): Note;
    static get D9(): Note;
    static get D$9(): Note;
    static get Eb9(): Note;
    static get E9(): Note;
    static get F9(): Note;
    static get F$9(): Note;
    static get Gb9(): Note;
    static get G9(): Note;
    readonly accidental: Accidental;
    readonly cents: number;
    readonly hertz: number;
    readonly midiValue: MidiValue;
    readonly name: NoteName;
    readonly octave: MidiOctave;
    readonly pitch: Pitch;
    velocity: MidiValue;
    _delay: (number | string | RelativeTime | RelativeTime.Components);
    _duration: (number | string | RelativeTime | RelativeTime.Components);
    constructor(value: (NoteName | MidiValue), options?: {
        velocity?: MidiValue;
        duration?: (number | string | RelativeTime | RelativeTime.Components);
        delay?: (number | string | RelativeTime | RelativeTime.Components);
    });
    get delay(): (number | string | RelativeTime | RelativeTime.Components);
    get duration(): (number | string | RelativeTime | RelativeTime.Components);
    get velocityDecimal(): number;
    clone({ velocity, duration, delay, }?: {
        velocity?: MidiValue;
        duration?: (number | string | RelativeTime | RelativeTime.Components);
        delay?: (number | string | RelativeTime | RelativeTime.Components);
    }): Note;
    chord(intervals: ((Interval | number)[] | Readonly<Interval[]>), options?: {
        velocity?: MidiValue;
        duration?: (number | string | RelativeTime | RelativeTime.Components);
        delay?: (number | string | RelativeTime | RelativeTime.Components);
    }): Chord;
    static add(note: (Note | NoteName | MidiValue), interval: (Interval | number)): Note;
    static subtract(note: (Note | NoteName | MidiValue), interval: (Interval | number)): Note;
    add(interval: (Interval | number)): Note;
    subtract(interval: (Interval | number)): Note;
    private static _adjust;
}
export declare namespace Note {
    const C: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", C$: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", Db: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", D: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", D$: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", Eb: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", E: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", F: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", F$: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", Gb: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", G: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", G$: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", Ab: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", A: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", A$: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", Bb: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B", B: "C" | "C#" | "Db" | "D" | "Eb" | "D#" | "E" | "F" | "F#" | "Gb" | "G" | "Ab" | "G#" | "A" | "Bb" | "A#" | "B";
}
export declare namespace _Note {
    type Value = (Note | NoteName | MidiValue);
    type Options = {
        velocity?: MidiValue;
        duration?: (number | string | RelativeTime | RelativeTime.Components);
        delay?: (number | string | RelativeTime | RelativeTime.Components);
    };
    const C_Negative1: Note, C$_Negative1: Note, Db_Negative1: Note, D_Negative1: Note, D$_Negative1: Note, Eb_Negative1: Note, E_Negative1: Note, F_Negative1: Note, F$_Negative1: Note, Gb_Negative1: Note, G_Negative1: Note, G$_Negative1: Note, Ab_Negative1: Note, A_Negative1: Note, A$_Negative1: Note, Bb_Negative1: Note, B_Negative1: Note, C0: Note, C$0: Note, Db0: Note, D0: Note, D$0: Note, Eb0: Note, E0: Note, F0: Note, F$0: Note, Gb0: Note, G0: Note, G$0: Note, Ab0: Note, A0: Note, A$0: Note, Bb0: Note, B0: Note, C1: Note, C$1: Note, Db1: Note, D1: Note, D$1: Note, Eb1: Note, E1: Note, F1: Note, F$1: Note, Gb1: Note, G1: Note, G$1: Note, Ab1: Note, A1: Note, A$1: Note, Bb1: Note, B1: Note, C2: Note, C$2: Note, Db2: Note, D2: Note, D$2: Note, Eb2: Note, E2: Note, F2: Note, F$2: Note, Gb2: Note, G2: Note, G$2: Note, Ab2: Note, A2: Note, A$2: Note, Bb2: Note, B2: Note, C3: Note, C$3: Note, Db3: Note, D3: Note, D$3: Note, Eb3: Note, E3: Note, F3: Note, F$3: Note, Gb3: Note, G3: Note, G$3: Note, Ab3: Note, A3: Note, A$3: Note, Bb3: Note, B3: Note, C4: Note, C$4: Note, Db4: Note, D4: Note, D$4: Note, Eb4: Note, E4: Note, F4: Note, F$4: Note, Gb4: Note, G4: Note, G$4: Note, Ab4: Note, A4: Note, A$4: Note, Bb4: Note, B4: Note, C5: Note, C$5: Note, Db5: Note, D5: Note, D$5: Note, Eb5: Note, E5: Note, F5: Note, F$5: Note, Gb5: Note, G5: Note, G$5: Note, Ab5: Note, A5: Note, A$5: Note, Bb5: Note, B5: Note, C6: Note, C$6: Note, Db6: Note, D6: Note, D$6: Note, Eb6: Note, E6: Note, F6: Note, F$6: Note, Gb6: Note, G6: Note, G$6: Note, Ab6: Note, A6: Note, A$6: Note, Bb6: Note, B6: Note, C7: Note, C$7: Note, Db7: Note, D7: Note, D$7: Note, Eb7: Note, E7: Note, F7: Note, F$7: Note, Gb7: Note, G7: Note, G$7: Note, Ab7: Note, A7: Note, A$7: Note, Bb7: Note, B7: Note, C8: Note, C$8: Note, Db8: Note, D8: Note, D$8: Note, Eb8: Note, E8: Note, F8: Note, F$8: Note, Gb8: Note, G8: Note, G$8: Note, Ab8: Note, A8: Note, A$8: Note, Bb8: Note, B8: Note, C9: Note, C$9: Note, Db9: Note, D9: Note, D$9: Note, Eb9: Note, E9: Note, F9: Note, F$9: Note, Gb9: Note, G9: Note;
    const All_Notes: Readonly<Note>[];
    const All_Notes_Sharp: Readonly<Note>[];
    const All_Notes_Flat: Readonly<Note>[];
    function construct_From_Data({ accidental, cents, hertz, midiValue, name, octave, pitch }: {
        accidental: Accidental;
        cents: number;
        hertz: number;
        midiValue: MidiValue;
        name: NoteName;
        octave: MidiOctave;
        pitch: Pitch;
    }, options?: Options): Note;
    function ensure_Note(note: Value): Note;
    function get_MidiValue_From_Note(note: Value): 0 | 45 | 100 | 4 | 1 | 2 | 3 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 123 | 124 | 125 | 126 | 127;
    function get_NoteRange({ start, end, accidental }: {
        start: _Note.Value;
        end: Value;
        accidental?: Accidental;
    }): Readonly<Note>[];
}
